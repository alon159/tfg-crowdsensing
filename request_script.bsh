import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;
import com.apvereda.db.Entity;
import com.apvereda.db.Value;
import com.apvereda.db.Avatar;
import com.apvereda.utils.DigitalAvatarController;
import com.apvereda.uDataTypes.EntityType;

JSONObject resultsjson = new JSONObject();
String result;

Entity crowdpoll = (Entity) dac.getAll("DA-Poll" + poll, type).get(0);
Value myresult = (Value) crowdpoll.get("myresult");
try {
    if (myresult != null) {
        JSONObject myresultjson = new JSONObject((String) myresult.get());
        JSONArray myresultjsonkeys = myresultjson.names();
        for (int i = 0; i < myresultjson.length(); i++) {
            String key = myresultjsonkeys.getString(i);
            JSONObject values = new JSONObject();
            values.put(myresultjson.getString(key), 1);
            resultsjson.put(key, values);
        }
    }

    Value contactsResults = (Value) crowdpoll.get("results");
    if (contactsResults != null) {
        JSONArray cresultsjson = new JSONArray(contactsResults.get());
        for (int i = 0; i < cresultsjson.length(); i++) {
            JSONObject cresult = cresultsjson.getJSONObject(i);
            JSONArray cresultkeys = cresult.names();
            for (int j = 0; j < cresult.length(); j++) {
                String key = cresultkeys.getString(j);
                JSONObject values = cresult.getJSONObject(key);
                if (values.has(cresult.getString(key))) {
                    values.put(cresult.getString(key), Integer.parseInt((String) values.get(cresult.getString(key))) + 1);
                } else {
                    values.put(cresult.getString(key), 1);
                }
                resultsjson.put(key, values);
            }
        }
    }

    if (resultsjson.length() > 0) {
        StringBuilder resultSB = new StringBuilder("{");
        JSONArray resultskeys = resultsjson.names();
        for (int i = 0; i < resultsjson.length(); i++) {
            String key = resultskeys.getString(i);
            JSONObject values = resultsjson.getJSONObject(key);
            JSONArray valueKeys = values.names();
            resultSB.append("'").append(key).append("' : {");
            for (int j = 0; j < values.length(); j++) {
                resultSB.append("'").append(valueKeys.getString(j)).append("' : '").append(values.get(valueKeys.getString(j))).append("' , ");
            }
            resultSB.delete(resultSB.length() - 3, resultSB.length() - 1);
            resultSB.append("} , ");
        }
        resultSB.delete(resultSB.length() - 3, resultSB.length() - 1);
        resultSB.append("}");
        result = resultSB.toString();
    }

} catch (JSONException e) {
            throw new RuntimeException(e);
} catch (NullPointerException e) {
       throw new RuntimeException(e);
}
